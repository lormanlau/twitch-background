{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","ws","useState","ready","setReady","_authUrl","setAuthUrl","r","g","b","left","setLeft","right","setRight","useEffect","getRandomInt","Math","floor","random","clock","setInterval","clearInterval","nonce","length","text","possible","i","charAt","heartbeat","send","JSON","stringify","type","connect","heartbeatHandle","WebSocket","onopen","event","console","log","onerror","error","onmessage","message","parse","data","setTimeout","onclose","document","location","hash","match","hashMatch","expr","state","sessionStorage","twitchOAuthState","twitchOAuthToken","parseFragment","className","style","background","display","id","href","src","logo","alt","xmlns","viewBox","preserveAspectRatio","shapeRendering","d","x","y","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.990f9323.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nconst clientId = 'jzrppcr9rjx38gwy84w3v6s56t0v2t';\nconst redirectURI = 'https://lormanlau.github.io/twitch-background/';\nconst scope = 'channel:read:redemptions';\n\nfunction App() {\n  const [ready, setReady] = useState(false);\n  const [_authUrl, setAuthUrl] = useState(\"/twitch-background\");\n  const [left, setLeft] = useState({ r: 84, g: 58, b: 183 })\n  const [right, setRight] = useState({ r: 0, g: 172, b: 193 })\n  var ws;\n\n  var hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : {\n      r: 0,\n      g: 0,\n      b: 0\n    }\n  }\n\n  // for testing to generate random colors\n  useEffect(() => {\n    function getRandomInt() {\n      return Math.floor(Math.random() * 256);\n    }\n    let clock = setInterval(() => {\n      setLeft({r: getRandomInt(), g: getRandomInt(), b: getRandomInt()})\n      setRight({r: getRandomInt(), g: getRandomInt(), b: getRandomInt()})\n    }, 5000);\n    return (() => {clearInterval(clock)}) \n  }, [])\n\n  var parseFragment = (hash) => {\n    var hashMatch = function (expr) {\n      var match = hash.match(expr);\n      return match ? match[1] : null;\n    };\n    var state = hashMatch(/state=(\\w+)/);\n    if (sessionStorage.twitchOAuthState === state)\n      sessionStorage.twitchOAuthToken = hashMatch(/access_token=(\\w+)/);\n  };\n\n  var authUrl = () => {\n    sessionStorage.twitchOAuthState = nonce(15);\n    var url = 'https://id.twitch.tv/oauth2/authorize' +\n      '?response_type=token' +\n      '&client_id=' + clientId +\n      '&redirect_uri=' + redirectURI +\n      '&state=' + sessionStorage.twitchOAuthState +\n      '&scope=' + scope;\n    return url\n  }\n\n  var nonce = (length) => {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  var heartbeat = () => {\n    let message = {\n      type: 'PING'\n    }\n    ws.send(JSON.stringify(message));\n  }\n\n  var connect = () => {\n    var heartbeatInterval = 1000 * 60;\n    var reconnectInterval = 1000 * 3;\n    var heartbeatHandle;\n\n    ws = new WebSocket('wss://pubsub-edge.twitch.tv');\n\n    ws.onopen = function (event) {\n      console.log('INFO: Socket Opened');\n      heartbeat();\n      heartbeatHandle = setInterval(heartbeat, heartbeatInterval);\n    };\n\n    ws.onerror = function (error) {\n      console.error('ERR:', error);\n    };\n\n    ws.onmessage = function (event) {\n      let message = JSON.parse(event.data);\n      console.log('RECV:', message);\n      if (message.type === 'RECONNECT') {\n        console.log('INFO: Reconnecting...');\n        setTimeout(connect, reconnectInterval);\n      }\n    };\n\n    ws.onclose = function () {\n      console.log('INFO: Socket Closed');\n      clearInterval(heartbeatHandle);\n      console.log('INFO: Reconnecting...');\n      setTimeout(connect, reconnectInterval);\n    };\n\n  }\n\n  useEffect(() => {\n    if (document.location.hash.match(/access_token=(\\w+)/))\n      parseFragment(document.location.hash);\n    if (sessionStorage.twitchOAuthToken) {\n      connect();\n      setReady(true)\n    } else {\n      setAuthUrl(authUrl());\n      setReady(false)\n    }\n  }, []);\n\n  return (\n    <div className=\"header\" style={{ background: `linear-gradient(60deg, rgba(${left.r},${left.g},${left.b}) 0%, rgba(${right.r},${right.g},${right.b}) 100%)` }}>\n      <div className=\"inner-header flex\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div style={{ display: ready ? \"none\" : \"block\" }} className=\"auth text-center\">\n              <p>First, connect with your Twitch Account:</p>\n              <a id=\"auth-link\" href={_authUrl}><img src={logo} alt=\"logo\" /></a>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div>\n        <svg className=\"waves\" xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 24 150 28\" preserveAspectRatio=\"none\" shapeRendering=\"auto\">\n          <defs>\n            <path id=\"gentle-wave\" d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\" />\n          </defs>\n          <g className=\"parallax\">\n            <use href=\"#gentle-wave\" x=\"48\" y=\"0\" fill=\"rgba(255,255,255,0.7\" />\n            <use href=\"#gentle-wave\" x=\"48\" y=\"3\" fill=\"rgba(255,255,255,0.5)\" />\n            <use href=\"#gentle-wave\" x=\"48\" y=\"5\" fill=\"rgba(255,255,255,0.3)\" />\n            <use href=\"#gentle-wave\" x=\"48\" y=\"7\" fill=\"#fff\" />\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}